<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_LoggerFactory" Id="{b8404249-a18b-44d8-b65a-74e70e60eebd}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call'} 
FUNCTION_BLOCK PUBLIC FB_LoggerFactory IMPLEMENTS I_LoggerFactory, I_Logger
VAR
	pList: 			POINTER TO I_Logger;
	nLength:		DINT;
	aList:			POINTER TO POINTER TO ARRAY [0..100] OF I_Logger:=ADR(pList);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="FB_exit" Id="{f0e9debf-1f4e-42f2-aefc-6828bde51642}">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Clear();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Add" Id="{f8d2c3de-92d5-4e1c-bb65-4e223ad7cda6}">
      <Declaration><![CDATA[METHOD PUBLIC M_Add : BOOL
VAR_INPUT
	Logger: 	I_Logger;
END_VAR
VAR
	pOldList: 	POINTER TO I_Logger;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Logger <> 0 THEN
	// First Item
	IF pList = 0 THEN
		nLength:= nLength + 1;
		pList:= __NEW(POINTER TO I_Logger,DINT_TO_UDINT(nLength));
	ELSE
		// Item already in List
		IF M_Find(Logger) = -1 THEN
			// backup 
			pOldList:= pList;
			// new Length
			nLength:= nLength + 1;
			// new pointer
			pList:= __NEW(POINTER TO I_Logger,DINT_TO_UDINT(nLength));
			// restore
			Memcpy(pList,pOldList, SIZEOF(POINTER TO I_Logger)*DINT_TO_UDINT(nLength -1));
			// delete old
			__DELETE(pOldList);
		ELSE
			M_Add:= FALSE;	
			RETURN;
		END_IF
	END_IF
	IF pList = 0 THEN
		RETURN;
	END_IF
	// add new Object
	pList[nLength-1]:= Logger;
	M_Add:= TRUE;
ELSE
	M_Add:= FALSE;	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Clear" Id="{18527732-c245-4c88-9be6-7c13e5f56d21}">
      <Declaration><![CDATA[METHOD PUBLIC M_Clear
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pList <> 0 THEN
	nLength:= 0;
	__DELETE(pList);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Find" Id="{96aafd90-ae6d-4e99-95b9-c69d70f1a5a3}">
      <Declaration><![CDATA[METHOD PUBLIC M_Find : DINT
VAR_INPUT
	Logger: 	I_Logger;
END_VAR
VAR
	nIndex: 	UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Object already in List
M_Find := -1;
WHILE nIndex < nLength DO
    IF (pList[nIndex] = Logger) THEN
        M_Find := nIndex;
        RETURN;
    END_IF
	nIndex := nIndex + 1;
END_WHILE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Index" Id="{6f6cd652-a775-4147-a8da-69433f8c6340}">
      <Declaration><![CDATA[METHOD PUBLIC M_Index : I_Logger
VAR_INPUT
	Index: 	DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Index <= nLength THEN
	M_Index:= pList[Index];
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Log" Id="{5b2b7bb0-6528-42d5-baf1-15d2967ff930}">
      <Declaration><![CDATA[METHOD PUBLIC M_Log 
VAR_INPUT
END_VAR

VAR
	nIndex: 		INT:= 0;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE nIndex < nLength DO
	pList[nIndex].M_Log();
	nIndex:= nIndex + 1; 
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Remove" Id="{b3231683-f99a-4dbc-be4f-947db7a473a5}">
      <Declaration><![CDATA[METHOD PUBLIC M_Remove : BOOL
VAR_INPUT
	Logger: 	I_Logger;
END_VAR
VAR
	pOldList:			POINTER TO I_Logger;
	nPosition: 			DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Logger <> 0 THEN
	// First Item
	IF nLength >= 0 THEN
		// Item already in List
		nPosition:= M_Find(Logger);
		IF nPosition <> -1 THEN
			// backup 
			pOldList:= pList;
			// new Length
			nLength:= nLength -1;
			// new pointer
			pList:= __NEW(POINTER TO I_Logger,DINT_TO_UDINT(nLength));
			// restore lower part
			Memcpy(pList,pOldList, SIZEOF(POINTER TO I_Logger) * DINT_TO_UDINT(nPosition));
			//pList[nPosition]:= iObject;
			Memcpy(pList + (SIZEOF(POINTER TO I_Logger)*nPosition),pOldList + (SIZEOF(POINTER TO I_Logger)*(nPosition + 1)), SIZEOF(POINTER TO I_Logger) * DINT_TO_UDINT(nLength - nPosition));
			// delete old
			__DELETE(pOldList);
		ELSE
			M_Remove:= FALSE;	
			RETURN;
		END_IF
	ELSE
		M_Remove:= FALSE;	
		RETURN;
	END_IF
	M_Remove:= TRUE;
ELSE
	M_Remove:= FALSE;	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_Length" Id="{a7d580d9-9057-4059-9017-d33bfc9b9b3c}">
      <Declaration><![CDATA[PROPERTY P_Length : DINT
]]></Declaration>
      <Get Name="Get" Id="{d74d1424-0e47-41e2-a9f0-35de94378c0b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Length:= nLength;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_LoggerFactory">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_LoggerFactory.FB_exit">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_LoggerFactory.M_Add">
      <LineId Id="299" Count="30" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_LoggerFactory.M_Clear">
      <LineId Id="3" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_LoggerFactory.M_Find">
      <LineId Id="87" Count="8" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_LoggerFactory.M_Index">
      <LineId Id="23" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_LoggerFactory.M_Log">
      <LineId Id="5" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_LoggerFactory.M_Remove">
      <LineId Id="254" Count="28" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_LoggerFactory.P_Length.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>