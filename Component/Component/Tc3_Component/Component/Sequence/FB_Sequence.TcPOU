<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Sequence" Id="{4b1aa270-5e63-4fbf-b9b1-b64186ed4cc4}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Sequence IMPLEMENTS I_Sequence
VAR_INPUT
	bHeld:				BOOL;
END_VAR
VAR_OUTPUT
	bTimeout:			BOOL;
END_VAR
VAR
	iParent:			I_Component;
	stExecute:			ST_Sequence;
	stLast:				ST_Sequence;
	stActual:			ST_Sequence;
	fbTimeout:			TON;
	fbDelay: 			TON;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// https://peterzerlauth.com/]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{9410888f-1e8d-054b-01cb-f8f70c408f51}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	iParent:			I_Component;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.iParent:= iParent;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Await" Id="{1bc0e82b-8467-4f35-a54e-996600fba2bc}">
      <Declaration><![CDATA[METHOD PUBLIC M_Await : BOOL
VAR_INPUT
	sMessage:				STRING(255);
	nID:					ULINT;
	tTimeout:				TIME;
	tDelay:					TIME;	
	bPause:					BOOL;
	bReturn:				BOOL;
	nNumber:				INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Assign the current message to the actual status structure
stActual.sMessage := sMessage;  

// Check the return condition
IF bReturn THEN  
    // Reset timeout
    fbTimeout(IN := FALSE);  
    bTimeout := FALSE; 
    // Start delay
    fbDelay(IN := TRUE, PT := tDelay);  
    
    // Delay elapsed  
    IF fbDelay.Q THEN  
        M_Await := TRUE;  
        // Set the next step number
        stActual.nNumber := nNumber;   
        // Save the last known state  
        stLast := stActual;  
        // Last state to restore
        IF iParent.P_State = E_State.Execute THEN  
            stExecute := stLast;  
        END_IF  
        
        // Reset delay
        fbDelay(IN := FALSE);  
        IF bHeld THEN  
            // Request a hold operation to the parent  
            iParent.M_Request(E_Request.Hold);  
        ELSIF bPause THEN  
            // Request a pause operation to the parent  
            iParent.M_Request(E_Request.Pause);  
        END_IF  
    END_IF  

ELSE  
    // Reset delay
    fbDelay(IN := FALSE);  
    // Start timeout
    fbTimeout(IN := tTimeout <> T#0S, PT := tTimeout);  
    // Timeout elapsed
    IF fbTimeout.Q THEN
		bTimeout := TRUE;   
        // Report Timeout 
        iParent.P_Event.M_Error(sMessage, nID);  
    END_IF  
END_IF  ]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Reset" Id="{36513383-9494-0732-02c6-f9c957e037d9}">
      <Declaration><![CDATA[METHOD PUBLIC M_Reset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bTimeout:= FALSE;
fbDelay(IN:= FALSE);
fbTimeout(IN:= FALSE);
stActual.sMessage:= 'fbSequence.M_Reset()';
stActual.nNumber:= E_Sequence.Start;
M_Reset:= TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Restore" Id="{1bd7bf81-b107-0061-0190-e2f9ae962872}">
      <Declaration><![CDATA[METHOD PUBLIC M_Restore : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stLast:= stActual;
stActual:= stExecute;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Set" Id="{1679b774-aff9-0900-1b9f-6b982123f170}">
      <Declaration><![CDATA[METHOD PUBLIC M_Set : BOOL
VAR_INPUT
	sMessage:				STRING(255);	
	nNumber:				INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stLast:= stActual;
IF iParent.P_State = E_State.Execute THEN
	stExecute:= stActual;
END_IF
stActual.sMessage:= Concat('Sequence.M_Set: ', sMessage);
stActual.nNumber:= nNumber;
M_Set:= TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_Number" Id="{3cc751bf-6092-4aa8-8de5-3276200b64ad}">
      <Declaration><![CDATA[
PROPERTY PUBLIC P_Number : INT]]></Declaration>
      <Get Name="Get" Id="{92b3a1f5-52d3-44fe-8629-e1295a1ef489}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Number:= stActual.nNumber;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_Timeout" Id="{eb074bec-3376-04de-22f4-48dc23a1d0c0}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Timeout : Bool]]></Declaration>
      <Get Name="Get" Id="{4091acc7-d1a3-074a-2f14-85ba09be9e4b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Timeout:= bTimeout;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>