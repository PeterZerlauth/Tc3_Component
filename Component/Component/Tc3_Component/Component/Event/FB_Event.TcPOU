<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Event" Id="{59616103-7f2e-4b6f-81bd-583969a36d28}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Event EXTENDS FB_ListString IMPLEMENTS I_Event
VAR_INPUT
	bIngoreHold:			BOOL:= TRUE;
	bIngorePause:			BOOL:= TRUE;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	iParent:			I_Component;
	iLogger:			I_Logger;
	stError:			ST_Event;
	stWarning:			ST_Event;
	stInformation:		ST_Event;
	stDebug:			ST_Event;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{be23ffcc-529d-4010-ace3-b17baed191a5}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	iParent:			I_Component;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.iParent:= iParent;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Arguments" Id="{70779266-7b36-4bce-9e6f-049e951fd75a}">
      <Declaration><![CDATA[METHOD INTERNAL M_Arguments : STRING(255)
VAR_INPUT
END_VAR
VAR
	nIndex:			INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE nIndex < nLength DO
	M_Arguments:= Concat(Concat(M_Arguments, pList[nIndex]), '$N');
	nIndex:= nIndex + 1;
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Debug" Id="{0a2b992b-2a4a-0251-0210-713b326debf6}">
      <Declaration><![CDATA[METHOD PUBLIC M_Debug : BOOL
VAR_INPUT
	Message:				STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF stDebug.Message <> Message THEN
	stDebug.New:= TRUE;
ELSE
	stDebug.New:= FALSE;
END_IF

stDebug.Source:= iParent;
stDebug.Instance:= iParent.P_Info.P_Instance;
stDebug.Class:= iParent.P_Info.P_Class;
stDebug.EventType:= E_Event.Debug;
stDebug.Timestamp:= F_GetSystemTime();
stDebug.ID:= '';
stDebug.Message:= Message;
stDebug.Arguments:= M_Arguments();
stDebug.Active:= TRUE;

IF iLogger <> 0 THEN
	iLogger.M_Log(stDebug);
END_IF

M_Clear();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Error" Id="{55348828-4763-4c06-9dd1-090fa29a8379}">
      <Declaration><![CDATA[METHOD PUBLIC M_Error : BOOL
VAR_INPUT
	Message:				STRING(255);
	ID:						ID;
	Reaction:				E_Reaction;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF stError.Message <> Message THEN
	stError.Source:= iParent;
	stError.Instance:= iParent.P_Info.P_Instance;
	stError.Class:= iParent.P_Info.P_Class;
	stError.EventType:= E_Event.Error;
	stError.Timestamp:= F_GetSystemTime();
	stError.ID:= ID;
	stError.Message:= Message;
	stError.Arguments:= M_Arguments();
	stError.New:= TRUE;
	stError.Active:= TRUE;


	IF Reaction >= E_Reaction.Abort THEN
		iParent.M_Request(E_Request.Abort);
	ELSIF Reaction >= E_Reaction.Stop THEN
		iParent.M_Request(E_Request.Stop);
	ELSIF Reaction >= E_Reaction.Complete THEN	
		iParent.M_Request(E_Request.Complete);
	ELSIF Reaction >= E_Reaction.Hold THEN
		iParent.M_Request(E_Request.Hold);
	ELSIF Reaction >= E_Reaction.Pause THEN
		iParent.M_Request(E_Request.Pause);
	END_IF
	
	IF iLogger <> 0 THEN
		iLogger.M_Log(stError);
	END_IF
END_IF

M_Clear();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Information" Id="{d9a244f2-1d6f-434f-aab4-cad6aacbb94f}">
      <Declaration><![CDATA[METHOD PUBLIC M_Information : BOOL
VAR_INPUT
	Message:				STRING(255);
	ID:						ID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF stInformation.Message <> Message THEN
	stInformation.New:= TRUE;
ELSE
	stInformation.New:= FALSE;
END_IF

stInformation.Source:= iParent;
stInformation.Instance:= iParent.P_Info.P_Instance;
stInformation.Class:= iParent.P_Info.P_Class;
stInformation.EventType:= E_Event.Information;
stInformation.Timestamp:= F_GetSystemTime();
stInformation.ID:= ID;
stInformation.Message:= Message;
stInformation.Arguments:= M_Arguments();
stInformation.Active:= TRUE;

IF iLogger <> 0 THEN
	iLogger.M_Log(stInformation);
END_IF

M_Clear();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Reset" Id="{31d9e5bb-2957-4381-81b6-d0453bdac8d3}">
      <Declaration><![CDATA[METHOD PUBLIC M_Reset
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Memset(ADR(stError), 0, SIZEOF(stError));
Memset(ADR(stWarning), 0, SIZEOF(stWarning));
Memset(ADR(stInformation), 0, SIZEOF(stInformation));
Memset(ADR(stDebug), 0, SIZEOF(stDebug));]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Warning" Id="{d443b8bb-774e-487e-80a2-79cf66a0376c}">
      <Declaration><![CDATA[METHOD PUBLIC M_Warning : BOOL
VAR_INPUT
	Message:				STRING(255);
	ID:						ID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF stWarning.Message <> Message THEN
	stWarning.New:= TRUE;
ELSE
	stWarning.New:= FALSE;
END_IF

stWarning.Source:= iParent;
stWarning.Instance:= iParent.P_Info.P_Instance;
stWarning.Class:= iParent.P_Info.P_Class;
stWarning.EventType:= E_Event.Warning;
stWarning.Timestamp:= F_GetSystemTime();
stWarning.ID:= ID;
stWarning.Message:= Message;
stWarning.Arguments:= M_Arguments();
stWarning.Active:= TRUE;

IF iLogger <> 0 THEN
	iLogger.M_Log(stWarning);
END_IF

M_Clear();]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_Logger" Id="{642d0edf-ded0-4248-be29-8384d3180124}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Logger : I_Logger]]></Declaration>
      <Get Name="Get" Id="{99e41819-eb78-4b29-b3e9-6728532b14b1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Logger:= iLogger;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{be31597a-6e88-476b-aec8-980317d6bc1a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[iLogger:= P_Logger;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="FB_Event">
      <LineId Id="68" Count="0" />
    </LineIds>
    <LineIds Name="FB_Event.FB_init">
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_Event.M_Arguments">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Event.M_Debug">
      <LineId Id="27" Count="1" />
      <LineId Id="30" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="10" Count="13" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Event.M_Error">
      <LineId Id="196" Count="29" />
      <LineId Id="62" Count="0" />
    </LineIds>
    <LineIds Name="FB_Event.M_Information">
      <LineId Id="26" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="30" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="11" Count="7" />
      <LineId Id="32" Count="0" />
      <LineId Id="20" Count="4" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Event.M_Reset">
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="15" Count="1" />
    </LineIds>
    <LineIds Name="FB_Event.M_Warning">
      <LineId Id="42" Count="1" />
      <LineId Id="46" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="40" Count="1" />
      <LineId Id="12" Count="7" />
      <LineId Id="47" Count="0" />
      <LineId Id="34" Count="3" />
      <LineId Id="39" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Event.P_Logger.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Event.P_Logger.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>