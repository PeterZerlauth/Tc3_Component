<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Event" Id="{59616103-7f2e-4b6f-81bd-583969a36d28}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Event IMPLEMENTS I_Event
VAR_INPUT
	fbObserver:			FB_Observable;				// Observer
END_VAR
VAR_OUTPUT
END_VAR
VAR
	iLogger:			I_Logger;
	iParent:			I_Component;				// Parent component
    {attribute 'hide'}
	fbList:				FB_ListString;				// contains a list with string values

	stEvent:			ST_Event;					// Event
    {attribute 'hide'}
	aHistory:			ARRAY [0..5] OF ST_Event;	// History of events
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// https://github.com/PeterZerlauth/Tc3_Component]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{be23ffcc-529d-4010-ace3-b17baed191a5}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	iParent:			I_Component;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.iParent:= iParent;
fbObserver.iParent:= iParent;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Abort" Id="{a968dc5e-d8ee-079a-0799-c81d1c9d2558}">
      <Declaration><![CDATA[METHOD PUBLIC M_Abort
VAR_INPUT
	sMessage:				STRING(255);
	nID:					ULINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stEvent.sMessage:= sMessage;
stEvent.iSource:= iParent;
stEvent.sInstance:= iParent.P_Info.P_Instance;
stEvent.sClass:= iParent.P_Info.P_Class;
stEvent.eEventType:= E_Event.Error;
stEvent.nTimestamp:= F_GetSystemTime();
stEvent.nID:= nID;
stEvent.sDefault:= M_Default(sMessage);
stEvent.sArguments:= M_Arguments();
stEvent.stFlags.bActive:= TRUE;
stEvent.stFlags.bRemove:= FALSE;

IF iLogger = 0 THEN
	fbLogger.M_Log(stEvent);
ELSE
	iLogger.M_Log(stEvent);
END_IF

iParent.M_RequestState(E_RequestState.Abort);

fbObserver.M_Notify(iParent, E_RequestState.Abort);

IF aHistory[0].sMessage <> stEvent.sMessage THEN
	MemCpy(ADR(aHistory[1]), ADR(aHistory[0]), SIZEOF(ST_Event) * 5);
	aHistory[0]:= stEvent;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_AddBOOL" Id="{55367f5b-ac71-0a63-095c-881721842948}">
      <Declaration><![CDATA[METHOD PUBLIC M_AddBOOL : I_Event
VAR_INPUT
	Value: 	bool;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbList.M_Add(BOOL_TO_STRING(Value));
M_AddBOOL:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_AddINT" Id="{77c01fd5-65e9-07ed-2cff-a79b9d444c15}">
      <Declaration><![CDATA[METHOD PUBLIC M_AddINT : I_Event
VAR_INPUT
	Value: 	LINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbList.M_Add(LINT_TO_STRING(Value));
M_AddINT:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_AddREAL" Id="{b0c25678-4933-0839-34f0-c4eb0def69fb}">
      <Declaration><![CDATA[METHOD PUBLIC M_AddREAL : I_Event
VAR_INPUT
	Value: 	Lreal;
	Decimals: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbList.M_Add(LREAL_TO_FMTSTR(Value, Decimals, TRUE));
M_AddREAL:= THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_AddSTRING" Id="{8ae81d27-cb47-01bb-2b19-fe8608e777a8}">
      <Declaration><![CDATA[METHOD PUBLIC M_AddSTRING : I_Event
VAR_INPUT
	Value: STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbList.M_Add(Value);
M_AddSTRING:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_AddTIME" Id="{a7c2a656-d860-0eb9-0cff-1e8b5b1d8573}">
      <Declaration><![CDATA[METHOD PUBLIC M_AddTIME : I_Event
VAR_INPUT
	Value: 	TIME;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbList.M_Add(TIME_TO_STRING(Value));
M_AddTIME:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Arguments" Id="{70779266-7b36-4bce-9e6f-049e951fd75a}">
      <Declaration><![CDATA[METHOD INTERNAL M_Arguments : STRING(255)
VAR_INPUT
END_VAR
VAR
	nIndex:			INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE nIndex < fbList. P_Length DO
	M_Arguments:= Concat(Concat(M_Arguments, fbList.M_Index(nIndex)), '$N');
	nIndex:= nIndex + 1;
END_WHILE

fbList.M_Clear();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Debug" Id="{0a2b992b-2a4a-0251-0210-713b326debf6}">
      <Declaration><![CDATA[METHOD PUBLIC M_Debug
VAR_INPUT
	sMessage:				STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stEvent.sMessage:= sMessage;
stEvent.iSource:= iParent;
stEvent.sInstance:= iParent.P_Info.P_Instance;
stEvent.sClass:= iParent.P_Info.P_Class;
stEvent.eEventType:= E_Event.Debug;
stEvent.nTimestamp:= F_GetSystemTime();
stEvent.nID:= 0;
stEvent.sDefault:= M_Default(sMessage);
stEvent.sArguments:= M_Arguments();
stEvent.stFlags.bActive:= TRUE;
stEvent.stFlags.bRemove:= TRUE;

IF iLogger = 0 THEN
	fbLogger.M_Log(stEvent);
ELSE
	iLogger.M_Log(stEvent);
END_IF

IF aHistory[0].sMessage <> stEvent.sMessage THEN
	MemCpy(ADR(aHistory[1]), ADR(aHistory[0]), SIZEOF(ST_Event) * 5);
	aHistory[0]:= stEvent;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Default" Id="{c94cd0c6-56df-0b94-2d8d-b10a55caeb26}">
      <Declaration><![CDATA[METHOD INTERNAL M_Default : STRING(255)
VAR_INPUT
	sMessage:		STRING(255);
END_VAR
VAR
	nIndex:		   	DINT;
	nPosition: 		INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[nPosition:= Find(sMessage, '%s');
WHILE nPosition <> 0 DO
	sMessage:= Replace(sMessage, fbList.M_Index(nIndex), 2, nPosition);
	nPosition:= Find(sMessage, '%s');
	nIndex:= nIndex + 1;
END_WHILE
M_Default:= sMessage;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Error" Id="{648ad3fe-ab2e-0b8d-0134-eed394027742}">
      <Declaration><![CDATA[METHOD PUBLIC M_Error
VAR_INPUT
	sMessage:				STRING(255);
	nID:					ULINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stEvent.sMessage:= sMessage;
stEvent.iSource:= iParent;
stEvent.sInstance:= iParent.P_Info.P_Instance;
stEvent.sClass:= iParent.P_Info.P_Class;
stEvent.eEventType:= E_Event.Error;
stEvent.nTimestamp:= F_GetSystemTime();
stEvent.nID:= nID;
stEvent.sDefault:= M_Default(sMessage);
stEvent.sArguments:= M_Arguments();
stEvent.stFlags.bActive:= TRUE;
stEvent.stFlags.bRemove:= TRUE;

IF iLogger = 0 THEN
	fbLogger.M_Log(stEvent);
ELSE
	iLogger.M_Log(stEvent);
END_IF

IF aHistory[0].sMessage <> stEvent.sMessage THEN
	MemCpy(ADR(aHistory[1]), ADR(aHistory[0]), SIZEOF(ST_Event) * 5);
	aHistory[0]:= stEvent;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Info" Id="{d9a244f2-1d6f-434f-aab4-cad6aacbb94f}">
      <Declaration><![CDATA[METHOD PUBLIC M_Info
VAR_INPUT
	sMessage:				STRING(255);
	nID:					ULINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stEvent.sMessage:= sMessage;
stEvent.iSource:= iParent;
stEvent.sInstance:= iParent.P_Info.P_Instance;
stEvent.sClass:= iParent.P_Info.P_Class;
stEvent.eEventType:= E_Event.Information;
stEvent.nTimestamp:= F_GetSystemTime();
stEvent.nID:= nID;
stEvent.sDefault:= M_Default(sMessage);
stEvent.sArguments:= M_Arguments();
stEvent.stFlags.bActive:= TRUE;
stEvent.stFlags.bRemove:= TRUE;

IF iLogger = 0 THEN
	fbLogger.M_Log(stEvent);
ELSE
	iLogger.M_Log(stEvent);
END_IF

IF aHistory[0].sMessage <> stEvent.sMessage THEN
	MemCpy(ADR(aHistory[1]), ADR(aHistory[0]), SIZEOF(ST_Event) * 5);
	aHistory[0]:= stEvent;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Stop" Id="{20d0062d-a518-02ec-13ef-e4c8c4295653}">
      <Declaration><![CDATA[METHOD PUBLIC M_Stop
VAR_INPUT
	sMessage:				STRING(255);
	nID:					ULINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stEvent.sMessage:= sMessage;
stEvent.iSource:= iParent;
stEvent.sInstance:= iParent.P_Info.P_Instance;
stEvent.sClass:= iParent.P_Info.P_Class;
stEvent.eEventType:= E_Event.Error;
stEvent.nTimestamp:= F_GetSystemTime();
stEvent.nID:= nID;
stEvent.sDefault:= M_Default(sMessage);
stEvent.sArguments:= M_Arguments();
stEvent.stFlags.bActive:= TRUE;
stEvent.stFlags.bRemove:= FALSE;

IF iLogger = 0 THEN
	fbLogger.M_Log(stEvent);
ELSE
	iLogger.M_Log(stEvent);
END_IF

iParent.M_RequestState(E_RequestState.Stop);

fbObserver.M_Notify(iParent, E_RequestState.Abort);

IF aHistory[0].sMessage <> stEvent.sMessage THEN
	MemCpy(ADR(aHistory[1]), ADR(aHistory[0]), SIZEOF(ST_Event) * 5);
	aHistory[0]:= stEvent;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Warning" Id="{d443b8bb-774e-487e-80a2-79cf66a0376c}">
      <Declaration><![CDATA[METHOD PUBLIC M_Warning
VAR_INPUT
	sMessage:				STRING(255);
	nID:					ULINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stEvent.sMessage:= sMessage;
stEvent.iSource:= iParent;
stEvent.sInstance:= iParent.P_Info.P_Instance;
stEvent.sClass:= iParent.P_Info.P_Class;
stEvent.eEventType:= E_Event.Warning;
stEvent.nTimestamp:= F_GetSystemTime();
stEvent.nID:= nID;
stEvent.sDefault:= M_Default(sMessage);
stEvent.sArguments:= M_Arguments();
stEvent.stFlags.bActive:= TRUE;
stEvent.stFlags.bRemove:= TRUE;

IF iLogger = 0 THEN
	fbLogger.M_Log(stEvent);
ELSE
	iLogger.M_Log(stEvent);
END_IF

IF aHistory[0].sMessage <> stEvent.sMessage THEN
	MemCpy(ADR(aHistory[1]), ADR(aHistory[0]), SIZEOF(ST_Event) * 5);
	aHistory[0]:= stEvent;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_History" Id="{3665e1b0-9cc6-03b2-3340-782cc05dee90}">
      <Declaration><![CDATA[{attribute 'OPC.UA.DA.Property' := '1'}
{attribute 'monitoring' := 'call'}
{attribute 'suppress_wrn_C0410'}
PROPERTY PUBLIC P_History : REFERENCE TO ARRAY [0..5] OF ST_Event;]]></Declaration>
      <Get Name="Get" Id="{60569c4b-9435-0706-3cee-cc8248c2c07e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_History REF= aHistory;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{28332c99-5893-03df-2133-bc9b1c978089}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_History REF= aHistory;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="P_Logger" Id="{7db5ebbd-2df4-0da4-1172-1f7f59531c54}">
      <Declaration><![CDATA[PROPERTY P_Logger : I_Logger]]></Declaration>
      <Get Name="Get" Id="{c30909c8-bc71-0c3f-2d6b-a056f1f6fe1b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Logger:= iLogger;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{69321800-5ac3-0207-1f07-4cc88412ab84}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[iLogger:= P_Logger;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="P_Observer" Id="{5a2ea21c-aedb-0c6a-2f12-df08356b98aa}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Observer : I_Observable]]></Declaration>
      <Get Name="Get" Id="{a355a491-866b-0089-1d02-e50cef149847}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Observer:= fbObserver;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>