<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Component" Id="{3beb4649-c557-0131-2fab-e053b34b5bbf}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'do not call this POU directly'} 
FUNCTION_BLOCK FB_Component EXTENDS FB_Object IMPLEMENTS I_Component, I_Observer
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	fbInfo:							FB_Info;					// Info about function block
	fbEvent:						FB_Event(THIS^);			// Event creator
	fbSequence:						FB_Sequence(THIS^);			// Sequence (abort = reset)
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	eStateRequest:					E_RequestState;				// State command
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '2'}
	eState:							E_State;					// Current state
    {attribute 'hide'}
	eStatePrevious:					E_State;					// Previous state
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	eModeRequest:					E_RequestMode;				// Requested mode
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '2'}
	eMode:							E_RequestMode;				// Current mode
    {attribute 'hide'}
	eModePrevious:					E_RequestMode;				// Previous mode
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// https://peterzerlauth.com/]]></ST>
    </Implementation>
    <Folder Name="Command" Id="{9635140d-5b18-006e-1e9e-963cbb8377f9}" />
    <Folder Name="State" Id="{ca15ba5f-c875-08b1-19c6-3566ddf8fed6}" />
    <Method Name="FB_init" Id="{badf4989-5758-03ee-2097-25283f2924c2}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL:= TRUE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Initialise();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Aborted" Id="{f47ae709-6b97-0869-103e-462a949d9bd1}" FolderPath="State\">
      <Declaration><![CDATA[METHOD PROTECTED M_Aborted : BOOL // Return
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Aborting" Id="{5420cd8c-8440-0133-17b0-cfc9fa3a226e}" FolderPath="State\">
      <Declaration><![CDATA[METHOD PROTECTED M_Aborting : BOOL // Return
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// State Aborting
M_Aborting:= TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Cycle" Id="{8157620c-1844-0b4a-092c-fe72147fa392}">
      <Declaration><![CDATA[METHOD PUBLIC M_Cycle
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbInfo();
fbEvent();
fbSequence();

CASE eState OF
	E_State.Undefined:
		IF M_Initialise() THEN	// return true for next state
			eMode:= E_RequestMode.Automatic;
			eState:= E_State.Stopped;			
		END_IF
				
	E_State.Resetting:
		IF M_Resetting() THEN // return true for next state
			eState:= E_State.Stopped;
			eStateRequest:= E_RequestState.Undefined;
		END_IF
		CASE eStateRequest OF	// Handle command
			E_RequestState.Hold:
				eState:= E_State.Holding;
				
			E_RequestState.Abort:
				eState:= E_State.Aborting;
				
		END_CASE
		
	E_State.Stopped:
		M_Running();
		IF M_Stopped() THEN	// return true for next state
			eState:= E_State.Starting;
		END_IF
		CASE eStateRequest OF	// Handle command
			
			E_RequestState.Start:
				eState:= E_State.Starting;
				
			E_RequestState.Hold:
				eState:= E_State.Holding;
				
			E_RequestState.Abort:
				eState:= E_State.Aborting;
				
			ELSE
				eStateRequest:= E_RequestState.Undefined;
				
		END_CASE

	E_State.Starting:
		M_Running();
		IF M_Starting() THEN	// return true for next state
			eState:= E_State.Execute;
			eStateRequest:= E_RequestState.Undefined;
		END_IF
		CASE eStateRequest OF	// Handle command
			
			E_RequestState.Stop:
				eState:= E_State.Stopping;
				
			E_RequestState.Hold:
				eState:= E_State.Holding;
				
			E_RequestState.Abort:
				eState:= E_State.Aborting;
				
		END_CASE

	E_State.Execute:
		M_Running();
		IF M_Execute() THEN // return true for next state
			eState:= E_State.Stopping;
		END_IF
		CASE eStateRequest OF	// Handle command
			E_RequestState.Stop:
				eState:= E_State.Stopping;
				
			E_RequestState.Hold:
				eState:= E_State.Holding;
				
			E_RequestState.Abort:
				eState:= E_State.Aborting;

			ELSE
				eStateRequest:= E_RequestState.Undefined;
				
		END_CASE

	E_State.Holding:
		M_Running();
		IF M_Holding() THEN // return true for next state
			eState:= E_State.Holded;
		END_IF
		CASE eStateRequest OF	// Handle command
			E_RequestState.Abort:
				eState:= E_State.Aborting;

		END_CASE

	E_State.Holded:
		M_Running();
		IF M_Holded() THEN // return true for next state
			eState:= E_State.Resetting;
		END_IF
		CASE eStateRequest OF	// Handle command
			E_RequestState.Reset:
				eState:= E_State.Resetting;
				
			E_RequestState.Abort:
				eState:= E_State.Aborting;
				
			ELSE
				eStateRequest:= E_RequestState.Undefined;

		END_CASE
		
	E_State.Stopping:
		M_Running();
		IF M_Stopping() THEN // return true for next state
			eState:= E_State.Stopped;
			eStateRequest:= E_RequestState.Undefined;
		END_IF
		CASE eStateRequest OF	// Handle command
			E_RequestState.Hold:
				eState:= E_State.Holding;
				
			E_RequestState.Abort:
				eState:= E_State.Aborting;
				
		END_CASE	
		
	E_State.Aborting:
		IF M_Aborting() THEN // return true for next state
			eState:= E_State.Aborted;
			eStateRequest:= E_RequestState.Undefined;
		END_IF
		
	E_State.Aborted:
		IF M_Aborted() THEN // return true for next state
			eState:= E_State.Resetting;
			eStateRequest:= E_RequestState.Undefined;		
		END_IF
		CASE eStateRequest OF	// Handle command
			
			E_RequestState.Stop:
				eState:= E_State.Stopping;
		
			E_RequestState.Reset:
				eState:= E_State.Resetting;
				
		ELSE
			eStateRequest:= E_RequestState.Undefined;				
		END_CASE

END_CASE


// Detect mode changes
IF eModeRequest <> E_RequestMode.Undefined THEN
	IF eMode <> eModeRequest THEN
		eModePrevious:= eMode;
		eMode:= eModeRequest;
		M_OnMode(eMode, eModePrevious);
	END_IF
END_IF
eModeRequest:= E_RequestMode.Undefined;
	
// Detect state changes
IF eStatePrevious <> eState THEN
	M_OnState(eState, eStatePrevious);
	eStatePrevious:= eState;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Execute" Id="{0a26e879-26ba-0448-077b-265f6eb411a3}" FolderPath="State\">
      <Declaration><![CDATA[METHOD PROTECTED M_Execute : BOOL // Return
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Execute:= True;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Holded" Id="{f81e94c9-4b34-0591-0431-3c8c41c7dc3f}" FolderPath="State\">
      <Declaration><![CDATA[METHOD PROTECTED M_Holded : BOOL // Return
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Holding" Id="{0453e1ef-1254-097d-2836-c180f9c76437}" FolderPath="State\">
      <Declaration><![CDATA[METHOD PROTECTED M_Holding : BOOL // Return
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// State Holding
M_Holding:= True;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Initialise" Id="{25962ce0-1492-0d73-2226-fd61bbb69809}" FolderPath="State\">
      <Declaration><![CDATA[METHOD PROTECTED M_Initialise : BOOL // Return
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Initialise:= True;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Notify" Id="{d8f6f158-ff95-0e77-1e0e-c4742a312f00}">
      <Declaration><![CDATA[METHOD PUBLIC M_Notify
VAR_INPUT
	iSender:		I_Component;
	eRequest:		E_RequestState;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Local request
M_RequestState(eRequest);

// Notify all other components in observer
fbEvent.P_Observer.M_Notify(iSender, eRequest);]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_OnMode" Id="{5404d353-f502-0cc7-293b-81200dd1aa4b}">
      <Declaration><![CDATA[METHOD PROTECTED M_OnMode
VAR_INPUT
	eMode:							E_RequestMode;						// Current mode
	eModePrevious:					E_RequestMode;						// Previous mode	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Mode changed event]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_OnState" Id="{49afef72-99ac-0c9e-2ec3-7701e0509cd3}">
      <Declaration><![CDATA[METHOD Protected M_OnState
VAR_INPUT
	eState:							E_State;						// Current state
	eStatePrevious:					E_State;						// Previous state	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// State changed event]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_RequestMode" Id="{8661b760-0fa5-007a-151c-7fe805544fbb}" FolderPath="Command\">
      <Declaration><![CDATA[{attribute 'TcRpcEnable':='1'}
METHOD PUBLIC M_RequestMode : BOOL
VAR_INPUT
	eMode:		E_RequestMode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF THIS^.eMode = eMode THEN
	M_RequestMode:= TRUE;
ELSE
	eModeRequest:= eMode;	
END_IF	]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_RequestState" Id="{bdd740c0-4464-0c1b-399c-16ea1aed66b8}" FolderPath="Command\">
      <Declaration><![CDATA[{attribute 'TcRpcEnable':='1'}
METHOD PUBLIC M_RequestState : BOOL
VAR_INPUT
	eRequest:	E_RequestState;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Request component states / Command Pattern
CASE eRequest OF
	E_RequestState.Undefined:
		M_RequestState:= TRUE;
		
	E_RequestState.Start:
		IF eState = E_State.Execute THEN
			M_RequestState:= TRUE;
		ELSE
			eStateRequest:= eRequest;				
		END_IF
		
	E_RequestState.Stop:
		IF eState = E_State.Stopped THEN
			M_RequestState:= TRUE;
		ELSE
			eStateRequest:= eRequest;
		END_IF
		
	E_RequestState.Hold:
		IF eState = E_State.Holded OR eState = E_State.Aborted THEN
			M_RequestState:= TRUE;
		ELSE
			eStateRequest:= eRequest;
		END_IF
		
	E_RequestState.Abort:
		IF eState = E_State.Aborted THEN
			M_RequestState:= TRUE;
		ELSE
			eStateRequest:= eRequest;
		END_IF

	E_RequestState.Reset:
		IF eState = E_State.Stopped THEN
			M_RequestState:= TRUE;
		ELSE
			eStateRequest:= eRequest;			
		END_IF
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Resetting" Id="{9e5fa12d-dc9f-0271-3ab1-62fbd4e3c4cb}" FolderPath="State\">
      <Declaration><![CDATA[METHOD PROTECTED M_Resetting : BOOL // Return state complete
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// State Resetting
M_Resetting:= True;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Running" Id="{c183b15a-6638-0cac-2cc8-e5cd884bfdf8}" FolderPath="State\">
      <Declaration><![CDATA[METHOD PROTECTED M_Running
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Will be called in all running states, for monitorings which not only in one state active]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Starting" Id="{7b4cc2a9-4be8-0ad5-3afd-3314d7249ec2}" FolderPath="State\">
      <Declaration><![CDATA[METHOD PROTECTED M_Starting : BOOL // Return state complete
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// State Starting
M_Starting:= True;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Stopped" Id="{415168e7-f2ee-0214-0037-987f9ecb70ed}" FolderPath="State\">
      <Declaration><![CDATA[METHOD PROTECTED M_Stopped : BOOL // Return
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Stopping" Id="{752f6f5c-84eb-0065-086e-87701d5b75a9}" FolderPath="State\">
      <Declaration><![CDATA[METHOD PROTECTED M_Stopping : BOOL // Return state complete
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// State Stopping
M_Stopping:= True;]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_Event" Id="{4af7c41c-ce75-074c-247b-1e9cde87d3d0}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Event : I_Event
]]></Declaration>
      <Get Name="Get" Id="{581dbbf1-1871-0bc4-2167-11bb575e35b8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Event:= fbEvent;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_Info" Id="{1f2686a8-22c2-03c1-3b18-3cdd0f1b6158}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Info : I_Info]]></Declaration>
      <Get Name="Get" Id="{80d9a233-1863-0529-037a-9eeb24a670c8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Info:= fbInfo;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_Mode" Id="{3bb67a0e-6846-07bc-053e-b55a797fa512}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Mode : E_RequestMode]]></Declaration>
      <Get Name="Get" Id="{9d5d15ee-5102-0655-3457-a8f0100c4631}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Mode:= eMode;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_State" Id="{b623cabe-ac07-05b3-3398-a07000fa3104}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_State : E_State]]></Declaration>
      <Get Name="Get" Id="{f9b2e5f6-eb20-00e6-39d5-99b5e96a63c5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_State:= eState;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>