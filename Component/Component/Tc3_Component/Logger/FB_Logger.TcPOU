<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Logger" Id="{fd2ecca2-796f-0c21-1b02-56f5057704fe}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Logger IMPLEMENTS I_Logger
VAR
	nLength:					DINT;
	aEvent:						ARRAY [0..nSize - 1] OF ST_Event;
	nIndex: 					DINT;
    {attribute 'hide'}
	nTimestamp: 				ULINT;
END_VAR	
VAR CONSTANT 
	nSize: DINT:= 50; 
END_VAR 
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// https://peterzerlauth.com/
// Execute each secound
IF nTimestamp < F_GetSystemTime() THEN
	nTimestamp:= F_GetSystemTime() + 10000000;
	nIndex:= 0;
	WHILE nIndex < nLength DO
		IF aEvent[nIndex].stFlags.bActive THEN
			IF aEvent[nIndex].stFlags.bRemove THEN
				aEvent[nIndex].stFlags.bActive:= FALSE;
			END_IF
		ELSE
			M_Delete(nIndex);
		END_IF
		nIndex := nIndex + 1;
	END_WHILE
END_IF
]]></ST>
    </Implementation>
    <Method Name="M_Delete" Id="{f3be1f6f-20c3-0e2d-3ceb-b9f0f6d0978c}">
      <Declaration><![CDATA[METHOD PUBLIC M_Delete : BOOL
VAR_INPUT
	nIndex: 			DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// new Length
nLength:= nLength -1;
//pList[nPosition]:= iObject;
Memcpy(ADR(aEvent[nIndex]), ADR(aEvent[nIndex +1]), SIZEOF(POINTER TO ST_Event) * DINT_TO_UDINT(nSize - nIndex));]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Find" Id="{7446ea89-7013-0042-2993-bd13114e3454}">
      <Declaration><![CDATA[METHOD PUBLIC M_Find : DINT
VAR_INPUT
	stEvent:	ST_Event;
END_VAR
VAR 
	nIndex:		DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Find event in buffer
M_Find := -1;
WHILE nIndex < nLength DO
	IF (aEvent[nIndex].iSource = stEvent.iSource) AND_THEN
    	(aEvent[nIndex].eEventType = stEvent.eEventType) AND_THEN
		(aEvent[nIndex].sInstance = stEvent.sInstance) AND_THEN
		(aEvent[nIndex].sMessage = stEvent.sMessage) THEN
        M_Find := nIndex;
        RETURN;
    END_IF
	nIndex := nIndex + 1;
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Log" Id="{fd45db9b-595d-048a-1bc0-4df6868d7fde}">
      <Declaration><![CDATA[METHOD PUBLIC M_Log
VAR_INPUT
	stEvent:		ST_Event;
END_VAR
VAR
	nIndex:			DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (nIndex:=  M_Find(stEvent)) >= 0 THEN
	// Update existing events
	aEvent[nIndex].sArguments:= stEvent.sArguments;
	aEvent[nIndex].sDefault:= stEvent.sDefault;
	aEvent[nIndex].sClass:= stEvent.sClass;
	aEvent[nIndex].stFlags:= stEvent.stFlags;
ELSE
	// add new event
	aEvent[nLength]:= stEvent;
	nLength:= nLength + 1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Reset" Id="{e0d35cb8-a065-06e5-0aeb-333f8aeafd2a}">
      <Declaration><![CDATA[METHOD PUBLIC M_Reset
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Reset all events
nLength:= 0;
Memset(ADR(aEvent), 0, SIZEOF(aEvent));
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>