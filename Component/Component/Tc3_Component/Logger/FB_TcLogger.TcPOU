<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_TcLogger" Id="{72d2883e-ad59-0356-2a9f-38b1de8737b2}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_TcLogger EXTENDS FB_AbstractLogger
VAR 
	aEvent:						ARRAY [0..nSize - 1] OF ST_Event;
END_VAR
VAR CONSTANT 
	nSize: DINT:= 50; 
END_VAR ]]></Declaration>
    <Implementation>
      <ST><![CDATA[// https://github.com/PeterZerlauth/Tc3_Component]]></ST>
    </Implementation>
    <Method Name="M_Find" Id="{8673586f-520d-08ba-3c29-c2fa20d66b2f}">
      <Declaration><![CDATA[METHOD PUBLIC M_Find : DINT
VAR_INPUT
	stEvent:	ST_Event;
END_VAR
VAR 
	nIndex:		DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Find event in buffer
M_Find := -1;
WHILE nIndex < nSize - 1 DO
	IF (aEvent[nIndex].iSource = stEvent.iSource) AND_THEN
    	(aEvent[nIndex].eEventType = stEvent.eEventType) AND_THEN
		(aEvent[nIndex].sInstance = stEvent.sInstance) AND_THEN
		(aEvent[nIndex].sMessage = stEvent.sMessage) THEN
        M_Find := nIndex;
        RETURN;
    END_IF
	nIndex := nIndex + 1;
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Log" Id="{b49d5339-ffee-0708-31e9-7df1e04a7ae3}">
      <Declaration><![CDATA[METHOD M_Log
VAR_INPUT
	{attribute 'analysis' := '-33'}
	stEvent	: ST_Event;
END_VAR
VAR
	nIndex:				DINT;
	sMessage:			STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (nIndex:=  M_Find(stEvent)) >= 0 THEN
	;
ELSE
	IF stEvent.eEventType >= SUPER^.eLogLevel THEN
		MEMCPY(ADR(aEvent[1]), ADR(aEvent[0]), DINT_TO_UDINT(SIZEOF(ST_Event) * (nSize - 1)));
		aEvent[0]:= stEvent;
		sMessage:= Concat(Concat(stEvent.sInstance, ' | '), stEvent.sDefault);
		CASE stEvent.eEventType OF
			E_Event.Error:
				ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_ERROR , msgFmtStr := '%s', strArg := sMessage);
			E_Event.Warning:
				ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_WARN , msgFmtStr := '%s', strArg := sMessage);
			E_Event.Information:
				ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_HINT , msgFmtStr := '%s', strArg := sMessage);
			E_Event.Debug:
				ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_HINT, msgFmtStr := '%s', strArg := sMessage);
			E_Event.Verbose:
				ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_HINT , msgFmtStr := '%s', strArg := sMessage);
		END_CASE
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Reset" Id="{cbf19873-fa53-0b82-1325-15b3130d0794}">
      <Declaration><![CDATA[METHOD PUBLIC M_Reset
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Reset all events
Memset(ADR(aEvent), 0, SIZEOF(aEvent));]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>