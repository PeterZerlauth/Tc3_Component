<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_LoggerFactory" Id="{17a4deeb-3f32-43cf-81dc-5b3250676d65}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call'} 
FUNCTION_BLOCK FB_LoggerFactory IMPLEMENTS I_Logger
VAR
	pList: 			POINTER TO I_Logger;
	nLength:		DINT;
	{attribute 'conditionalshow'}
	aList:			POINTER TO POINTER TO ARRAY [0..100] OF I_Logger:=ADR(pList);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="FB_exit" Id="{f0caa77e-190e-43ae-bb06-07b714b8a18f}">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Clear();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Add" Id="{30be55d6-cf17-42ec-bab2-8496ca3e4bb7}">
      <Declaration><![CDATA[METHOD M_Add : BOOL
VAR_INPUT
	Object: 	I_Logger;
END_VAR
VAR
	pOldList: 	POINTER TO I_Logger;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Object <> 0 THEN
	// First Item
	IF pList = 0 THEN
		nLength:= nLength + 1;
		pList:= __NEW(POINTER TO I_Logger,DINT_TO_UDINT(nLength));
	ELSE
		// Item already in List
		IF M_Find(Object) = -1 THEN
			// backup 
			pOldList:= pList;
			// new Length
			nLength:= nLength + 1;
			// new pointer
			pList:= __NEW(POINTER TO I_Object,DINT_TO_UDINT(nLength));
			// restore
			Memcpy(pList,pOldList, SIZEOF(POINTER TO I_Logger)*DINT_TO_UDINT(nLength -1));
			// delete old
			__DELETE(pOldList);
		ELSE
			M_Add:= FALSE;	
			RETURN;
		END_IF
	END_IF
	IF pList = 0 THEN
		RETURN;
	END_IF
	// add new Object
	pList[nLength-1]:= Object;
	M_Add:= TRUE;
ELSE
	M_Add:= FALSE;	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Clear" Id="{042635b2-72f7-44c7-8bf4-67ae82f26d85}">
      <Declaration><![CDATA[METHOD M_Clear : bool
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pList <> 0 THEN
	nLength:= 0;
	__DELETE(pList);
END_IF
M_Clear:= True;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Find" Id="{e9786265-621b-4660-a6dc-ed21579016db}">
      <Declaration><![CDATA[METHOD M_Find : DINT
VAR_INPUT
	Object: 	I_Logger;
END_VAR
VAR
	nIndex: 	UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Object already in List
M_Find := -1;
WHILE nIndex < nLength DO
    IF (pList[nIndex] = Object) THEN
        M_Find := nIndex;
        RETURN;
    END_IF
	nIndex := nIndex + 1;
END_WHILE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Index" Id="{7b7372db-f59a-4003-8595-8388e59cf872}">
      <Declaration><![CDATA[METHOD M_Index : I_Logger
VAR_INPUT
	Index: 	DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Index <= nLength THEN
	M_Index:= pList[Index];
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Log" Id="{5899e838-f7bb-4bd0-afae-9740382d88b8}">
      <Declaration><![CDATA[METHOD PUBLIC M_Log
VAR_INPUT
	stEvent:		ST_Event;
END_VAR
VAR
	nIndex: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE nIndex < nLength DO
	M_Index(nIndex).M_Log(stEvent);
	nIndex:= nIndex +1;
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Remove" Id="{39a89d42-848a-463c-b22d-6b58503f39b7}">
      <Declaration><![CDATA[METHOD M_Remove : BOOL
VAR_INPUT
	Object: 	I_Logger;
END_VAR
VAR
	pOldList:			POINTER TO I_Logger;
	nPosition: 			DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Object <> 0 THEN
	// First Item
	IF nLength >= 0 THEN
		// Item already in List
		nPosition:= M_Find(Object);
		IF nPosition <> -1 THEN
			// backup 
			pOldList:= pList;
			// new Length
			nLength:= nLength -1;
			// new pointer
			pList:= __NEW(POINTER TO I_Logger,DINT_TO_UDINT(nLength));
			// restore lower part
			Memcpy(pList,pOldList, SIZEOF(POINTER TO I_Logger) * DINT_TO_UDINT(nPosition));
			//pList[nPosition]:= iObject;
			Memcpy(pList + (SIZEOF(POINTER TO I_Logger)*nPosition),pOldList + (SIZEOF(POINTER TO I_Logger)*(nPosition + 1)), SIZEOF(POINTER TO I_Logger) * DINT_TO_UDINT(nLength - nPosition));
			// delete old
			__DELETE(pOldList);
		ELSE
			M_Remove:= FALSE;	
			RETURN;
		END_IF
	ELSE
		M_Remove:= FALSE;	
		RETURN;
	END_IF
	M_Remove:= TRUE;
ELSE
	M_Remove:= FALSE;	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_Length" Id="{204ffc46-f79a-43c7-8f5e-2f17a96a74ca}">
      <Declaration><![CDATA[PROPERTY P_Length : DINT
]]></Declaration>
      <Get Name="Get" Id="{c47e8563-f222-4476-9a6e-349dbc7965b1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Length:= nLength;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_LoggerFactory">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_LoggerFactory.FB_exit">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_LoggerFactory.M_Add">
      <LineId Id="164" Count="22" />
      <LineId Id="200" Count="1" />
      <LineId Id="199" Count="0" />
      <LineId Id="187" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_LoggerFactory.M_Clear">
      <LineId Id="3" Count="2" />
      <LineId Id="2" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_LoggerFactory.M_Find">
      <LineId Id="66" Count="8" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_LoggerFactory.M_Index">
      <LineId Id="23" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_LoggerFactory.M_Log">
      <LineId Id="7" Count="2" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_LoggerFactory.M_Remove">
      <LineId Id="132" Count="28" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_LoggerFactory.P_Length.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>