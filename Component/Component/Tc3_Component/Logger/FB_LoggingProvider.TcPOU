<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_LoggingProvider" Id="{8d6eb986-1a4b-011f-072f-86ab56dd3ee8}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'do not call this POU directly'} 
FUNCTION_BLOCK FB_LoggingProvider IMPLEMENTS I_Logger
VAR
	{IF (defined (release))}
    	{attribute 'hide'}
	{END_IF}
	nLength:		INT;
	pList: 			POINTER TO I_Logger;
	{IF (defined (release))}
    	{attribute 'hide'}
	{END_IF}
	aList:			POINTER TO POINTER TO ARRAY [0..24] OF I_Logger:=ADR(pList);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// https://peterzerlauth.com/]]></ST>
    </Implementation>
    <Method Name="FB_exit" Id="{f2cbd9f6-7524-0c7f-39f0-dce225abbc0c}">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Clear();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Add" Id="{48be3447-76e8-0bc8-0db5-61654f9fc9a9}">
      <Declaration><![CDATA[METHOD PUBLIC M_Add : BOOL
VAR_INPUT
	Logger: 	I_Logger;
END_VAR
VAR
	pOldList: 	POINTER TO I_Logger;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Logger <> 0 THEN
	// First Item
	IF pList = 0 THEN
		nLength:= nLength + 1;
		pList:= __NEW(POINTER TO I_Logger,DINT_TO_UDINT(nLength));
	ELSE
		// Item already in List
		IF M_Find(Logger) = -1 THEN
			// backup 
			pOldList:= pList;
			// new Length
			nLength:= nLength + 1;
			// new pointer
			pList:= __NEW(POINTER TO I_Logger,DINT_TO_UDINT(nLength));
			// restore
			Memcpy(pList,pOldList, SIZEOF(POINTER TO I_Logger)*DINT_TO_UDINT(nLength -1));
			// delete old
			__DELETE(pOldList);
		ELSE
			M_Add:= FALSE;	
			RETURN;
		END_IF
	END_IF
	IF pList = 0 THEN
		RETURN;
	END_IF
	// add new Object
	pList[nLength-1]:= Logger;
	M_Add:= TRUE;
ELSE
	M_Add:= FALSE;	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Clear" Id="{8b758e8a-4901-0f32-3045-a207842a9e60}">
      <Declaration><![CDATA[METHOD PUBLIC M_Clear : bool
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pList <> 0 THEN
	nLength:= 0;
	__DELETE(pList);
END_IF
M_Clear:= True;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Find" Id="{37f499ab-a90c-0435-0594-f330a6c37cb8}">
      <Declaration><![CDATA[METHOD PUBLIC M_Find : DINT
VAR_INPUT
	Logger: 	I_Logger;
END_VAR
VAR
	nIndex: 	UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Object already in List
M_Find := -1;
WHILE nIndex < nLength DO
    IF (pList[nIndex] = Logger) THEN
        M_Find := nIndex;
        RETURN;
    END_IF
	nIndex := nIndex + 1;
END_WHILE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Index" Id="{c0986c64-83e2-03be-09c2-3f0e829e981d}">
      <Declaration><![CDATA[METHOD PUBLIC M_Index : I_Logger
VAR_INPUT
	Index: 	DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Index <= nLength THEN
	M_Index:= pList[Index];
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Log" Id="{179441ef-3445-0ab5-3cfb-99e937e75dd0}">
      <Declaration><![CDATA[METHOD public M_Log
VAR_INPUT
	stEvent	: ST_Event;
END_VAR
VAR
	nIndex:		INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE nIndex < nLength DO
    pList[nIndex].M_Log(stEvent);
	nIndex := nIndex + 1;
END_WHILE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Remove" Id="{344ce544-0b6b-0e0a-1940-689d2bdbdc8d}">
      <Declaration><![CDATA[METHOD PUBLIC M_Remove : BOOL
VAR_INPUT
	Object: 	I_Logger;
END_VAR
VAR
	pOldList:			POINTER TO I_Logger;
	nPosition: 			DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Object <> 0 THEN
	// First Item
	IF nLength >= 0 THEN
		// Item already in List
		nPosition:= M_Find(Object);
		IF nPosition <> -1 THEN
			// backup 
			pOldList:= pList;
			// new Length
			nLength:= nLength -1;
			// new pointer
			pList:= __NEW(POINTER TO I_Logger,DINT_TO_UDINT(nLength));
			// restore lower part
			Memcpy(pList,pOldList, SIZEOF(POINTER TO I_Logger) * DINT_TO_UDINT(nPosition));
			//pList[nPosition]:= iObject;
			Memcpy(pList + (SIZEOF(POINTER TO I_Logger)*nPosition),pOldList + (SIZEOF(POINTER TO I_Logger)*(nPosition + 1)), SIZEOF(POINTER TO I_Logger) * DINT_TO_UDINT(nLength - nPosition));
			// delete old
			__DELETE(pOldList);
		ELSE
			M_Remove:= FALSE;	
			RETURN;
		END_IF
	ELSE
		M_Remove:= FALSE;	
		RETURN;
	END_IF
	M_Remove:= TRUE;
ELSE
	M_Remove:= FALSE;	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Reset" Id="{712bd779-7e41-0302-0fbf-f2b5cb6e6996}">
      <Declaration><![CDATA[METHOD public M_Reset
VAR
	nIndex:		INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE nIndex < nLength DO
    pList[nIndex].M_Reset();
	nIndex := nIndex + 1;
END_WHILE
]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_Length" Id="{cf1d82fc-0cbb-0b4a-372a-308b43a41775}">
      <Declaration><![CDATA[{attribute 'OPC.UA.DA.Property' := '1'}
{attribute 'monitoring' := 'call'}
PROPERTY PUBLIC P_Length : DINT
]]></Declaration>
      <Get Name="Get" Id="{378639c8-9631-0870-37c8-2847124df936}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Length:= nLength;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>