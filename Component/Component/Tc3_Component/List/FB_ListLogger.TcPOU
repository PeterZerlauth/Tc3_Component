<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_ListLogger" Id="{e544611a-234b-41f0-a2f4-370d09300d40}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'do not call this POU directly'} 
FUNCTION_BLOCK FB_ListLogger IMPLEMENTS I_ListLogger
VAR
	nLength:		DINT;
	pList: 			POINTER TO I_Logger;
	{IF (defined (release))}
    	{attribute 'hide'}
	{END_IF}
	aList:			POINTER TO POINTER TO ARRAY [0..49] OF I_Logger:=ADR(pList);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// https://github.com/PeterZerlauth/Tc3_Component]]></ST>
    </Implementation>
    <Method Name="M_Remove" Id="{189e810f-c6b4-47c1-b992-db816a4528ab}">
      <Declaration><![CDATA[METHOD PUBLIC M_Remove : BOOL
VAR_INPUT
	Object: 	I_Logger;
END_VAR
VAR
	pOldList:			POINTER TO I_Logger;
	nPosition: 			DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Object <> 0 THEN
	// First Item
	IF nLength >= 0 THEN
		// Item already in List
		nPosition:= M_Find(Object);
		IF nPosition <> -1 THEN
			// backup 
			pOldList:= pList;
			// new Length
			nLength:= nLength -1;
			// new pointer
			pList:= __NEW(POINTER TO I_Object,DINT_TO_UDINT(nLength));
			// restore lower part
			Memcpy(pList,pOldList, SIZEOF(POINTER TO I_Logger) * DINT_TO_UDINT(nPosition));
			//pList[nPosition]:= iObject;
			Memcpy(pList + (SIZEOF(POINTER TO I_Logger)*nPosition),pOldList + (SIZEOF(POINTER TO I_Logger)*(nPosition + 1)), SIZEOF(POINTER TO I_Logger) * DINT_TO_UDINT(nLength - nPosition));
			// delete old
			__DELETE(pOldList);
		ELSE
			M_Remove:= FALSE;	
			RETURN;
		END_IF
	ELSE
		M_Remove:= FALSE;	
		RETURN;
	END_IF
	M_Remove:= TRUE;
ELSE
	M_Remove:= FALSE;	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_Length" Id="{30983850-222a-4d9f-8853-1922bdd2acf2}">
      <Declaration><![CDATA[{attribute 'OPC.UA.DA.Property' := '1'}
{attribute 'monitoring' := 'call'}
PROPERTY PUBLIC P_Length : DINT
]]></Declaration>
      <Get Name="Get" Id="{b7dc2af1-7d1f-4faa-bbc3-0c8cfe6195b4}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Length:= nLength;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="M_Clear" Id="{30f681dc-94e7-4c0c-8079-b7f22c33e87f}">
      <Declaration><![CDATA[METHOD PUBLIC M_Clear : bool
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pList <> 0 THEN
	nLength:= 0;
	__DELETE(pList);
END_IF
M_Clear:= True;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Find" Id="{4d5022dc-4c24-493a-8c5e-89e34548cfdf}">
      <Declaration><![CDATA[METHOD PUBLIC M_Find : DINT
VAR_INPUT
	Object: 	I_Logger;
END_VAR
VAR
	nIndex: 	UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Object already in List
M_Find := -1;
WHILE nIndex < nLength DO
    IF (pList[nIndex] = Object) THEN
        M_Find := nIndex;
        RETURN;
    END_IF
	nIndex := nIndex + 1;
END_WHILE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{631d45d4-7bd2-4174-87c5-b3e5345f712f}">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Clear();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Index" Id="{9dad6230-cc2a-4fb5-9add-bf1bd25f27c4}">
      <Declaration><![CDATA[METHOD PUBLIC M_Index : I_Logger
VAR_INPUT
	Index: 	DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Index <= nLength THEN
	M_Index:= pList[Index];
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Add" Id="{aa50ac62-517c-4f4e-af04-784934d24ddb}">
      <Declaration><![CDATA[METHOD PUBLIC M_Add : BOOL
VAR_INPUT
	Object: 	I_Logger;
END_VAR
VAR
	pOldList: 	POINTER TO I_Logger;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Object <> 0 THEN
	// First Item
	IF pList = 0 THEN
		nLength:= nLength + 1;
		pList:= __NEW(POINTER TO I_Logger,DINT_TO_UDINT(nLength));
	ELSE
		// Item already in List
		IF M_Find(Object) = -1 THEN
			// backup 
			pOldList:= pList;
			// new Length
			nLength:= nLength + 1;
			// new pointer
			pList:= __NEW(POINTER TO I_Logger,DINT_TO_UDINT(nLength));
			// restore
			Memcpy(pList,pOldList, SIZEOF(POINTER TO I_Logger)*DINT_TO_UDINT(nLength -1));
			// delete old
			__DELETE(pOldList);
		ELSE
			M_Add:= FALSE;	
			RETURN;
		END_IF
	END_IF
	IF pList = 0 THEN
		RETURN;
	END_IF
	// add new Object
	pList[nLength-1]:= Object;
	M_Add:= TRUE;
ELSE
	M_Add:= FALSE;	
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>