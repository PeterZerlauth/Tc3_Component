<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Module01" Id="{3744d03d-359c-4ab8-84fb-4ea93b7a5162}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Module01 EXTENDS FB_Module
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	fbComponentE0:				FB_ComponentEx;
	fbComponentE1:				FB_ComponentEx;
	fbComponentE2:				FB_ComponentEx;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// https://peterzerlauth.com/]]></ST>
    </Implementation>
    <Method Name="M_Cycle" Id="{655447dc-389e-494a-be91-78d8a111b7aa}">
      <Declaration><![CDATA[METHOD PUBLIC M_Cycle
VAR_INPUT
END_VAR

VAR

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.M_Cycle();

fbComponentE0.M_Cycle();
fbComponentE1.M_Cycle();
fbComponentE2.M_Cycle();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Execute" Id="{0f7f4331-8af5-0744-015a-f65d0021dd06}">
      <Declaration><![CDATA[METHOD PROTECTED M_Execute : bool
VAR_INPUT
END_VAR
VAR
	bReturn:					BOOL:= TRUE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE fbSequence.P_Number OF
	E_Sequence.Start:
		bReturn:= TRUE;
		fbSequence.M_Await('Start 0', T#0S, T#0S, TRUE, bReturn, 10);
	
	10:
		bReturn:= TRUE;
		fbSequence.M_Await('Step 10', T#0S, T#0S, TRUE, bReturn, 20);
		
	20:
		bReturn:= TRUE;
		fbSequence.M_Await('Step 20', T#0S, T#0S, FALSE, bReturn, E_Sequence.Done);	
		
	E_Sequence.Done:
		fbSequence.M_Reset();
		M_Execute:= TRUE;
END_CASE

// IF bWarning THEN
// 	fbEvent.M_Warning('My secound Warning', 19 );	
// END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Initialise" Id="{714c485c-83a6-4af2-a706-fec3f6b598e5}">
      <Declaration><![CDATA[METHOD PROTECTED M_Initialise : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Initialise:= SUPER^.M_Initialise();

Globals.bSimulation:= TRUE;

P_Info.P_ID:= 'M001';


fbLevelE0.M_Attach(fbComponentE0);
fbLevelE1.M_Attach(fbComponentE1);
fbLevelE2.M_Attach(fbComponentE2);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Running" Id="{eaffebca-5ff2-4f17-be84-3310a9ace22e}">
      <Declaration><![CDATA[METHOD PROTECTED M_Running
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT IO.bOn THEN
	fbEvent.M_AddSTRING('BMK1');
	fbEvent.M_Abort('Power not on  %s', 15);
ELSIF NOT IO. bEMStop THEN
	fbEvent.M_AddSTRING('BMK2');
	fbEvent.M_Abort('Emergency stop not ok %s', 16);
ELSIF NOT IO.bDoorsOk THEN
	fbEvent.M_AddSTRING('BMK3');
	fbEvent.M_Hold('Door Not OK', 17);	
ELSIF NOT IO.bFuse THEN	
	fbEvent.M_Hold('Fuse Triped', 18);		
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Starting" Id="{6f002794-61fc-043c-1d84-a8bc502c5d3a}">
      <Declaration><![CDATA[METHOD PROTECTED M_Starting : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Starting:= SUPER^.M_Starting();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Stopping" Id="{478c517c-d184-0eaf-2697-597088f6cf3f}">
      <Declaration><![CDATA[METHOD PROTECTED M_Stopping : BOOL // Return state complete
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// State Stopping
M_Stopping:= SUPER^.M_Stopping();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>