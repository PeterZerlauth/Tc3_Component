<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Module02" Id="{c6d30f55-be05-0005-0105-ea54e786664b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Module02 EXTENDS FB_Module
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	fbComponent0:				FB_ComponentEx;
	fbComponent1:				FB_ComponentEx;
	fbContactor:				FB_Contactor;
	fbCylinder:					FB_Cylinder;
	fbPnozMulti:				FB_PnozMulti;
	fbAxis:						FB_AxisBase;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// https://peterzerlauth.com/
SUPER^();
fbComponent0();
fbComponent1();
fbContactor();
fbCylinder();
fbPnozMulti();
fbAxis();

fbContactor.bInput:= fbContactor.bOutput;]]></ST>
    </Implementation>
    <Method Name="M_Execute" Id="{06feba3b-22b0-0914-2021-212ac5c61859}">
      <Declaration><![CDATA[METHOD PROTECTED M_Execute : BOOL
VAR_INPUT
END_VAR
VAR
	bReturn:					BOOL:= TRUE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE fbSequence.P_Number OF
	E_Sequence.Start:
		bReturn:= fbAxis.M_MoveAbsolute(100.0, 5.0);
		fbSequence.M_Await('Start 0', T#0S , T#1S, TRUE, bReturn, 10);
	
	10:
		bReturn:= fbAxis.M_MoveAbsolute(0.0, 5.0);
		fbSequence.M_Await('Step 10', T#0S, T#0S, TRUE, bReturn, 20);
		
	20:
		bReturn:= TRUE;
		fbSequence.M_Await('Step 20', T#1S, T#0S, FALSE, bReturn, E_Sequence.Done);
		IF fbSequence.P_Timeout THEN
			fbEvent.M_Stop('Overrride timeout error', 0);
		END_IF
		
	E_Sequence.Done:
		fbSequence.M_Reset();
		M_Execute:= TRUE;

END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Initialise" Id="{7045f7be-5b6b-0b9d-0b46-fb0427cb63e2}">
      <Declaration><![CDATA[METHOD PROTECTED M_Initialise : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Initialise:= SUPER^.M_Initialise();

P_Info.P_ID:= 'M002';

fbMembers.M_Attach(THIS^, fbComponent0);
fbMembers.M_Attach(THIS^, fbComponent1);
fbMembers.M_Attach(THIS^, fbContactor);
fbMembers.M_Attach(THIS^, fbCylinder);
fbMembers.M_Attach(THIS^, fbPnozMulti);
fbMembers.M_Attach(THIS^, fbAxis);]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Running" Id="{2a591ff0-3e07-0e37-2848-19c33a266c29}">
      <Declaration><![CDATA[METHOD PROTECTED M_Running
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT IO.bOn THEN
	fbEvent.M_AddSTRING('BMK1');
	fbEvent.M_Abort('Power not on %s', 15);
ELSIF NOT IO.bEMStop THEN
	fbEvent.M_AddSTRING('BMK2');
	fbEvent.M_Abort('Emergency stop not ok %s', 16);
ELSIF NOT IO.bDoorsOk THEN
	fbEvent.M_AddSTRING('BMK3');
	fbEvent.M_Stop('Door Not OK', 17);	
ELSIF NOT IO.bFuse THEN	
	fbEvent.M_Stop('Fuse Triped', 18);		
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Starting" Id="{9658bef1-b0ab-0b28-221c-efa0bb28574e}">
      <Declaration><![CDATA[METHOD PROTECTED M_Starting : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Starting:= SUPER^.M_Starting();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Stopping" Id="{56429024-b91e-0e77-1ee0-0202fe2eab84}">
      <Declaration><![CDATA[METHOD PROTECTED M_Stopping : BOOL // Return state complete
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// State Stopping
M_Stopping:= SUPER^.M_Stopping();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>